#include <iostream>
#include <stdlib.h>
using namespace std;

struct node {
	int key;
	node *left;
	node *right;
	node *parent;
	node(){};
	node(int x):left(NULL),right(NULL),key(x){}
};

struct tree {
	node *root;
	tree():root(NULL) {};
};

void tree_view(tree* T)
{
	node *t = new node();
	t = T->root;
	while (t)
	{
		if (t->left != NULL)
		{
			t = t->left;
			continue;
		}
		else
		{
			cout << t->key << " ";
			if (t->right)
			{
				t = t->right;
				continue;
			}

			while (1)
			{
				if (t == t->parent->left && t->parent->right)
				{
					cout << t->parent->key << " ";
					t = t->parent->right;
					break;
				}
				if (t == t->parent->left && t->parent->right == NULL)
				{
					cout << t->parent->key << " ";
				}

				t = t->parent;
				if (t == T->root)
				{
					cout << endl;
					return;
				}

			}

		}
	}
}
int main()
{
	int key, left, right;
	node A[11];
	for (int i =1; i <= 10;i++)
	{
		cin >> key >> left >> right;
		A[i].key = key;
		if (left)
		{
			A[i].left = &A[left];
			A[left].parent = &A[i];

		}
		else
		{
			A[i].left = NULL;
		}

		if (right)
		{
			A[i].right = &A[right];
			A[right].parent = &A[i];
		}
		else
		{
			A[i].right = NULL;
		}
	}

	tree * T = new tree();
	T->root = &A[6];

	tree_view(T);
	system("pause");
	return 0;
}
